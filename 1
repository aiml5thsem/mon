import asyncio
from mcp_agent.core.fastagent import FastAgent
from mcp_agent.mcp.mcp_aggregator import MCPAggregator

# Global or instance-level log container
tool_log = []

class LoggingAggregator(MCPAggregator):
    async def call_tool(self, name, arguments, *args, **kwargs):
        tool_log.append((name, arguments))
        return await super().call_tool(name, arguments, *args, **kwargs)

# Monkey-patch MCPAggregator used internally (if subclass injection is not possible)
MCPAggregator.call_tool = LoggingAggregator.call_tool

fast = FastAgent("example")

@fast.agent(instruction="You are a helpful agent who can access tools")
async def main():
    async with fast.run() as agent:
        res = await agent.send("Some query hereâ€¦")
        print("Result:", res)
        print("Tool usage:", tool_log)

if __name__ == "__main__":
    asyncio.run(main())
